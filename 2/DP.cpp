#include <stdio.h>

int knapSack(int n,int w[],int v[],int MW)  
//传入参数为物品数量n,每个物品重量w[],每个物品价值v[],包的最大承重MW 
{
	int V[n+1][MW+1];  
	//定义二维表，V[i][j]表示的含义是当第i个物品放入最大承重为j的包时，包能容纳的最大的价值
	int i,j;
	for(i=0;i<=n;i++)
		V[i][0]=0;
	for(i=0;i<=MW;i++)
		V[0][i]=0;
	//将二维表处理一下，0行和0列都为0 
	  
	  
	//填表  
	for( i = 1 ; i <= n ; i++ )      //从第一个物品开始装 
		for( j = 1; j <= MW ; j++ )   //包的最大承重逐一增加 
		{
			if (j-w[i-1]<0)    		 // w[i-1]是第i个物品的重量，如果当前物品加进来会超过包此时的最大承重 
				V[i][j] = V[i-1][j];  // 那就不把该物品加入，则此处的值应该与前一个物品在这个承重下的值一样 
			else					
				// 如果该物品可以被加入 ，需要判断：
				// 该物品的价值加上包最大承重减去该物品重量下包的最大价值  是否会大于  不加入该物品包的最大价值 
				V[i][j]= ( V[i-1][j] > ( V[i-1][j-w[i-1]]+v[i-1] ) ) ?   V[i-1][j] : V[i-1][j-w[i-1]]+v[i-1] ;
		}	

	// // 标记元素是否被装入包中
	// int flag[n];  //flag数组记录第i个物品是否被装入，若被装入则flag[i-1]=1,未被装入则flag[i-1]=0
	// for (i = n, j = MW ; i > 0; i--)
	// {
	// 	if(V[i][j]>V[i-1][j])
	// 	{
	// 		flag[i-1]=1；
	// 		j=j-w[i-1]
	// 	}
	// }

	
	return V[n][W];	
}



int main()
{
	int n=5;
	int w[5]={2,2,6,5,4};
	int v[5]={6,3,5,4,6};
	int W=10;
	int V;
	V=knapSack(n,w,v,W);
		
	printf("%d",V);
	return 0;  
} 


